
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Логин = "b@b.ru";
	Пароль ="123123";
	Сервер = "192.168.1.119";
	Порт = "8000";
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияСайтаПриИзменении(Элемент)
	ОрганизацияСайтаПриИзмененииНаСервере();
КонецПроцедуры    

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы
// Код процедур и функций
#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Авторизация(Команда)
	
    ПутьЗапроса = "api/admin/login";
	ТипЗапроса = "POST";
	ТелоЗапроса = ЗаписатьЗначениеJSON(Новый Структура("email, password", Логин, Пароль));
	Ответ = ПолучитьИзСервиса(ПутьЗапроса, ТипЗапроса, ТелоЗапроса);
	
	КукаСеанса = Ответ.Заголовки.Получить(КлючУстановкаКуки());
	Если КукаСеанса <> Неопределено Тогда
		Куки = Ответ.Заголовки[КлючУстановкаКуки()];
	КонецЕсли;                                  
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьТовары(Команда)
	
    ПутьЗапроса = "api/admin/products";
	ТипЗапроса = "POST";
	
	Для каждого стр из Товары Цикл
		Если НЕ стр.Выгружать Тогда
			Продолжить;
		КонецЕсли;
		
		ВызватьHTTPМетод(ПутьЗапроса, ТипЗапроса, ОписаниеПродукта(стр));
	КонецЦикла;
		
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьССайта(Команда)
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьКонтакт(Команда)

    ПутьЗапроса = "api/admin/newcontacts";
	ТипЗапроса = "POST";
	ТелоЗапроса = ЗаписатьКонтактНаСервере();
	
	ВызватьHTTPМетод(ПутьЗапроса, ТипЗапроса, ТелоЗапроса);
		
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПроизвольнуюКИ(Команда)       
	
	ПутьЗапроса = "api/admin/newcontacts";
	ТипЗапроса = "POST";
	ТелоЗапроса = ПроизвольнаяКИ;
	
	ВызватьHTTPМетод(ПутьЗапроса, ТипЗапроса, ТелоЗапроса);

КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьНаСайт(Команда)    

	ПутьЗапроса = "api/category/new";
	ТипЗапроса = "POST";
		
	Для каждого стр из СтруктураКаталога Цикл
		Если НЕ стр.Выгружать Тогда
			Продолжить;
		КонецЕсли;
		
		ТелоЗапроса = КатегорияКаталога(стр);
		ВызватьHTTPМетод(ПутьЗапроса, ТипЗапроса, ТелоЗапроса);
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура СписокНоменклатуры(Команда)

	ТипЗапроса = "GET";
	ПутьЗапроса = "api/admin/products";
	
	ПродуктыСайта = ПолучитьИзСервиса(ПутьЗапроса, ТипЗапроса);
	ПродуктыОбъектами = ПрочитатьЗначениеJSON(ПродуктыСайта.ПолучитьТелоКакСтроку());
	времПродукт = ПродуктСайта();
	
	Для каждого МодельПродукта из ПродуктыОбъектами Цикл 
		нс = Товары.Добавить();
		
		Для каждого кз из времПродукт Цикл
			Если МодельПродукта.Свойство(кз.Ключ) Тогда
				нс[кз.Значение.Имя+"_Сайт"] = МодельПродукта[кз.Ключ];
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	СписокИзБД = СписокНоменклатурыНаСервере();  
	
	Для каждого номБД из СписокИзБД Цикл
		рез = Товары.НайтиСтроки(Новый Структура("ИдСистемы_Сайт", номБД.УникальныйИдентификатор));
		
		Если рез.Количество() = 0 Тогда
			стрТовары = Товары.Добавить();
		Иначе                             
			стрТовары = рез[0];
		КонецЕсли;
		
		стрТовары.ИдСистемы = номБД.УникальныйИдентификатор; 
		ЗаполнитьЗначенияСвойств(стрТовары, номБД);	

	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВидыНоменклатуры(Команда)
	ЗаполнитьВидыНоменклатурыНаСервере();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область УправлениеТоварами

&НаСервере
Функция СписокНоменклатурыНаСервере()
	
	Запрос = Новый Запрос;
	КореньСайт = Справочники.ВидыНоменклатуры.НайтиПоНаименованию("СайтКаталог", Истина);   
	Запрос.УстановитьПараметр("ВидНоменклатуры", КореньСайт);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	сп.Ссылка КАК Номенклатура,
	|	сп.Наименование КАК Артикул,
	|	сп.Наименование КАК Описание,
	|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) КАК Цена,
	|	сп.Описание КАК Описание1
	|ПОМЕСТИТЬ всяН
	|ИЗ
	|	Справочник.Номенклатура КАК сп
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних КАК ЦеныНоменклатурыСрезПоследних
	|		ПО (ЦеныНоменклатурыСрезПоследних.Номенклатура = сп.Ссылка)
	|ГДЕ
	|	сп.ЭтоГруппа = ЛОЖЬ
	|	И сп.ПометкаУдаления = ЛОЖЬ
	|	И сп.ВидНоменклатуры В ИЕРАРХИИ(&ВидНоменклатуры)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт.Номенклатура КАК Номенклатура,
	|	вт.Артикул КАК Артикул,
	|	ВЫБОР
	|		КОГДА вт.Описание1 = """"
	|			ТОГДА вт.Артикул + ""("" + вт.Номенклатура.Артикул + "")"" + вт.Номенклатура.ЦеноваяГруппа.Наименование
	|		ИНАЧЕ вт.Описание1
	|	КОНЕЦ КАК Описание,
	|	ЕСТЬNULL(вт.Цена, 0) КАК Цена,
	|	ПРЕДСТАВЛЕНИЕ(УНИКАЛЬНЫЙИДЕНТИФИКАТОР(вт.Номенклатура)) КАК УникальныйИдентификатор
	|ИЗ
	|	всяН КАК вт";
	
  	Возврат	ОбщегоНазначения.ТаблицаЗначенийВМассив(Запрос.Выполнить().Выгрузить());	

КонецФункции

&НаСервере
Процедура ЗаполнитьВидыНоменклатурыНаСервере()
	
	Запрос = Новый Запрос;      
	
	КореньСайт = Справочники.ВидыНоменклатуры.НайтиПоНаименованию("СайтКаталог", Истина);
	Запрос.УстановитьПараметр("Ссылка", КореньСайт);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВидыНоменклатуры.Ссылка КАК Ссылка,
	               |	ВидыНоменклатуры.Наименование КАК Наименование,
	               |	ВидыНоменклатуры.Родитель КАК Родитель,
	               |	УНИКАЛЬНЫЙИДЕНТИФИКАТОР(ВидыНоменклатуры.Ссылка) КАК УИДСсылки,
	               |	ВЫБОР
	               |		КОГДА ВидыНоменклатуры.Родитель = &Ссылка
	               |			ТОГДА УНИКАЛЬНЫЙИДЕНТИФИКАТОР(ЗНАЧЕНИЕ(Справочник.ВидыНоменклатуры.ПустаяСсылка))
	               |		ИНАЧЕ УНИКАЛЬНЫЙИДЕНТИФИКАТОР(ВидыНоменклатуры.Родитель)
	               |	КОНЕЦ КАК УИДРодителя
	               |ИЗ
	               |	Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	               |ГДЕ
	               |	ВидыНоменклатуры.ПометкаУдаления = ЛОЖЬ
	               |	И ВидыНоменклатуры.Ссылка В ИЕРАРХИИ(&Ссылка)";
	СтруктураКаталога.Очистить(); 
	ДанныеБД = Запрос.Выполнить().Выгрузить();
	
	Для каждого стр из ДанныеБД Цикл
		
		нс = СтруктураКаталога.Добавить();
		нс.ВидНоменклатуры = стр.Ссылка;
		нс.НаименованиеСайт = стр.Наименование;
		нс.Родитель = стр.Родитель;
		нс.УидСсылки = Строка(стр.УИДСсылки);
		нс.УИДРодителя = Строка(стр.УИДРодителя);
		
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Функция ОписаниеПродукта(стрТаб)

	Продукт = Новый Структура;
	Продукт.Вставить("title", стрТаб.Артикул);
	Продукт.Вставить("description", стрТаб.Описание);
	Продукт.Вставить("image", "https://mhkschool31.gosuslugi.ru/netcat_files/8/140/nofoto_3.jpeg");
	Продукт.Вставить("price", стрТаб.Цена);
	Продукт.Вставить("ExdID", Строка(стрТаб.Номенклатура.УникальныйИдентификатор()));
	Продукт.Вставить("hotsale",ложь);
	Продукт.Вставить("id",0);
	Продукт.Вставить("min_ost", 5);
	Продукт.Вставить("price_action",стрТаб.Цена*0.9);

	Возврат ЗаписатьЗначениеJSON(Продукт);
	
КонецФункции   

&НаКлиенте
Функция КатегорияКаталога(стрТаб)
	
	РазделКаталога = Новый Структура;
	РазделКаталога.Вставить("uid", стрТаб.УидСсылки);
	РазделКаталога.Вставить("name", стрТаб.НаименованиеСайт);
	РазделКаталога.Вставить("parent_uid", стрТаб.УИДРодителя);  
	РазделКаталога.Вставить("active", Истина);  
	
	Возврат ЗаписатьЗначениеJSON(РазделКаталога);	
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПродуктСайта()
	
	Продукт = Новый Соответствие;
	Продукт.Вставить("ext_id", ПредставлениеКлюча("ИдСистемы")); 
	Продукт.Вставить("description", ПредставлениеКлюча("Описание"));
	Продукт.Вставить("id", ПредставлениеКлюча("ВнешнийИД"));
	Продукт.Вставить("image", ПредставлениеКлюча("КартинкаURL"));
	//Продукт.Вставить("min_ost", ПредставлениеКлюча("Остаток"));
	Продукт.Вставить("price", ПредставлениеКлюча("Цена"));
	Продукт.Вставить("price_action", ПредставлениеКлюча("ЦенаАкция"));
	Продукт.Вставить("title", ПредставлениеКлюча("Артикул"));

	Возврат Продукт;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеКлюча(ИмяВСистеме, Доп = Неопределено)
	
	Возврат Новый Структура("Имя", ИмяВСистеме);
	
КонецФункции
#КонецОбласти

#Область УправлениеКонтактами
&НаСервере
Функция ЗаписатьКонтактНаСервере()
	        
	ДанныеДляОтправки = СтруктураИзШаблона("ШаблонКонтактнаяИнформация");
	Контакты = ДанныеДляОтправки.card.states[0].div.items;
	Контакты.Добавить(ЗаголовокБлок());
	Контакты.Добавить(ОписаниеБлок());
	
	ОбщийКонтейнерКИ = СтруктураИзШаблона("ШаблонКонтейнерКИ");
	                                	
	Для каждого стрКИ из КонтактыДляСайта Цикл            
		тб = ТекстБлок();
		тб.text = СтрШаблон("%1:%2", стрКИ.Название, стрКИ.Значение);
		ОбщийКонтейнерКИ.items.Добавить(тб);
	КонецЦикла;                           
	
	Контакты.Добавить(ОбщийКонтейнерКИ); 
	
	возврат ЗаписатьЗначениеJSON(ДанныеДляОтправки);
	
КонецФункции 

Процедура ЗаполнитьТаблицуДляВыгрузки(ТабКИ)
	
	КонтактыДляСайта.Очистить();
	
	ки_Титул = ОрганизацияСайта.НаименованиеПолное;  	
	ки_ПодробноеОписание = ОрганизацияСайта.НаименованиеСокращенное;
	
	для каждого стр из ТабКИ Цикл
		нс = КонтактыДляСайта.Добавить();
		нс.Название = стр.Вид;
		нс.Значение = стр.Представление;
	КонецЦикла;
	
КонецПроцедуры   

&НаСервере
Процедура ОрганизацияСайтаПриИзмененииНаСервере()
	ОтборКИ = УправлениеКонтактнойИнформацией.ОтборКонтактнойИнформации();
	ОтборКИ.Дата = ТекущаяДата();
	
	КИ = УправлениеКонтактнойИнформацией.КонтактнаяИнформация(ОрганизацияСайта, ОтборКИ);  
	ЗаполнитьТаблицуДляВыгрузки(КИ);	
КонецПроцедуры

#КонецОбласти

#Область УправлениеАкциями


#КонецОбласти

#Область DivKit

Функция РазделительБлок()
	
	Разделитель = Новый Структура;
	Разделитель.Вставить("type","empty_block"); 
	
	Высота = Новый Структура;
	Высота.Вставить("type","match_parent");
	Высота.Вставить("weight", 4);
	
	Разделитель.Вставить("width", Высота); 
	
	Возврат Разделитель;                  
	
КонецФункции

Функция ЗаголовокБлок()
	
	Блок = Новый Структура;
	Блок.Вставить("type", "title");
	Блок.Вставить("text",ки_Титул);
	
	Возврат Блок;
	
КонецФункции

Функция ОписаниеБлок()
	
	Блок = Новый Структура;
	Блок.Вставить("type", "subtitle");
	Блок.Вставить("text",ки_ПодробноеОписание);
	
	Возврат Блок;
	
КонецФункции

Функция ТекстБлок()
	
	Блок = Новый Структура;
	Блок.Вставить("type", "text_block");
	Блок.Вставить("text","");
	
	Возврат Блок;
	
КонецФункции

Функция СтруктураИзШаблона(ИмяМакета)

	макет = РеквизитФормыВЗначение("Объект").ПолучитьМакет(ИмяМакета);
	
	ОбщийШаблонПредставления = макет.ПолучитьТекст();
	
	Возврат ПрочитатьЗначениеJSON(ОбщийШаблонПредставления);
	
КонецФункции
#КонецОбласти

#Область Клиенты

#КонецОбласти

#Область Общие
&НаКлиенте
Процедура ВызватьHTTPМетод(АдресМетода, ТипЗапроса, СтрокаТелаЗапроса = Неопределено)
	
	рез =  ПолучитьИзСервиса(АдресМетода, ТипЗапроса, СтрокаТелаЗапроса);
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьИзСервиса(АдресМетода, ТипЗапроса, СтрокаТелаЗапроса = Неопределено)

	хттпЗапрос = Новый HTTPЗапрос(АдресМетода);
	Соединение = Новый HTTPСоединение(Сервер,Число(Порт));
	хттпЗапрос.Заголовки.Вставить("Content-Type","application/json");   
	хттпЗапрос.Заголовки.Вставить(КлючКукиЗаголовок(), Куки);
	
	Если СтрокаТелаЗапроса <> Неопределено Тогда
		хттпЗапрос.УстановитьТелоИзСтроки(СтрокаТелаЗапроса); 
	КонецЕсли;
	
	Ответ = Соединение.ВызватьHTTPМетод(ТипЗапроса,хттпЗапрос);           
	
	ДобавитьВЛог(РазделительЛога());
	ДобавитьВЛог("Запрос    : " + АдресМетода);
	ДобавитьВЛог("Состояние : " + Ответ.КодСостояния);
	ДобавитьВЛог("ТелоОтвета: " + Ответ.ПолучитьТелоКакСтроку());	
	
	Возврат Ответ;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьВЛог(СтрокаВЛог)     
	
	ЛогРаботы = ЛогРаботы + Символы.ПС +СтрокаВЛог;
	
КонецПроцедуры
#КонецОбласти


#Область Константы
&НаКлиенте
Функция РазделительЛога()
	
	Возврат "
		|==================================
		|";
КонецФункции

&НаКлиенте
Функция КлючКукиЗаголовок()
	
	Возврат "Cookie";

КонецФункции

&НаКлиенте
Функция КлючУстановкаКуки()
	
	Возврат "Set-Cookie";
	
КонецФункции

#КонецОбласти

#КонецОбласти    
 

