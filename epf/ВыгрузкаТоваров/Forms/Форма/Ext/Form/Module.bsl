
//Cookie
&НаКлиенте
Перем Куки;

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Логин = "b@b.ru";
	Пароль ="123123";
	Сервер = "192.168.1.119";
	Порт = "8000";
КонецПроцедуры

&НаКлиенте
Процедура Авторизация(Команда)
	хттпЗапрос = НОвый HTTPЗапрос("api/admin/login");
	Соединение  = Новый HTTPСоединение(Сервер,Число(Порт));
	хттпЗапрос.УстановитьТелоИзСтроки("{
  |  ""email"":""b@b.ru"",
   | ""password"":""123123""}");	              
	хттпЗапрос.Заголовки.Вставить("Content-Type","application/json");
	рез = Соединение.ВызватьHTTPМетод("POST",хттпЗапрос);           
	
	КукаСеанса = рез.Заголовки.Получить(КлючУстановкаКуки());
	Если КукаСеанса <> Неопределено Тогда
		Куки = рез.Заголовки[КлючУстановкаКуки()];
	КонецЕсли;                                  
	
	Сообщить(рез.КодСостояния);
	Сообщить(рез.ПолучитьТелоКакСтроку());
КонецПроцедуры


Функция КлючКукиЗаголовок()
	
	Возврат "Cookie";

КонецФункции

Функция КлючУстановкаКуки()
	
	Возврат "Set-Cookie";
	
КонецФункции

&НаКлиенте
Процедура ВыгрузитьТовары(Команда)
		
	хттпЗапрос = НОвый HTTPЗапрос("api/admin/products");
	Соединение  = Новый HTTPСоединение(Сервер,Число(Порт));
	хттпЗапрос.Заголовки.Вставить("Content-Type","application/json");   
	хттпЗапрос.Заголовки.Вставить(КлючКукиЗаголовок(), Куки);
	
	Для каждого стр из Товары Цикл
		Если НЕ стр.Выгружать Тогда
			Продолжить;
		КонецЕсли;
		
		хттпЗапрос.УстановитьТелоИзСтроки(ОписаниеПродукта(стр));
		рез = Соединение.ВызватьHTTPМетод("POST",хттпЗапрос);           
		
		стр.КодОтвета = рез.КодСостояния;
		стр.ТекстОтвета = рез.ПолучитьТелоКакСтроку();		
	КонецЦикла;
	
	
	
КонецПроцедуры

&НаКлиенте
Функция ОписаниеПродукта(стрТаб)

	Продукт = Новый Структура;
	Продукт.Вставить("title", стрТаб.Артикул);
	Продукт.Вставить("description", стрТаб.Описание);
	Продукт.Вставить("image", "https://mhkschool31.gosuslugi.ru/netcat_files/8/140/nofoto_3.jpeg");
	Продукт.Вставить("price", стрТаб.Цена);
	
	ЗаписьДЖСОН = НОвый ЗаписьJSON;
	ЗаписьДЖСОН.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьДЖСОН, Продукт);
	
	Возврат ЗаписьДЖСОН.Закрыть(); 
	
КонецФункции

&НаКлиенте
Функция КатегорияКаталога(стрТаб)
	
	РазделКаталога = Новый Структура;
	РазделКаталога.Вставить("uid", стрТаб.УидСсылки);
	РазделКаталога.Вставить("name", стрТаб.НаименованиеСайт);
	РазделКаталога.Вставить("parent_uid", стрТаб.УИДРодителя);  
	РазделКаталога.Вставить("active", Истина);  
	
	
	ЗаписьДЖСОН = НОвый ЗаписьJSON;
	ЗаписьДЖСОН.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьДЖСОН, РазделКаталога);
	
	Возврат ЗаписьДЖСОН.Закрыть();	
	
КонецФункции

&НаКлиенте
Процедура СписокНоменклатуры(Команда)
	СписокНоменклатурыНаСервере();
КонецПроцедуры

&НаСервере
Процедура СписокНоменклатурыНаСервере()
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	сп.Ссылка КАК Номенклатура,
	|	сп.Наименование КАК Артикул,
	|	сп.Наименование КАК Описание,
	|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) КАК Цена
	|ПОМЕСТИТЬ всяН
	|ИЗ
	|	Справочник.Номенклатура КАК сп
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних КАК ЦеныНоменклатурыСрезПоследних
	|		ПО (ЦеныНоменклатурыСрезПоследних.Номенклатура = сп.Ссылка)
	|ГДЕ
	|	сп.ЭтоГруппа = ЛОЖЬ
	|	И сп.ПометкаУдаления = ЛОЖЬ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт.Номенклатура КАК Номенклатура,
	|	вт.Артикул КАК Артикул,
	|	вт.Артикул + ""("" + вт.Номенклатура.Артикул + "")"" + вт.Номенклатура.ЦеноваяГруппа.Наименование КАК Описание,
	|	МАКСИМУМ(вт.Цена) КАК Цена
	|ИЗ
	|	всяН КАК вт
	|ГДЕ
	|	вт.Цена > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	вт.Номенклатура,
	|	вт.Артикул,
	|	вт.Артикул + ""("" + вт.Номенклатура.Артикул + "")"" + вт.Номенклатура.ЦеноваяГруппа.Наименование";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Товары.Добавить(), Выборка);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВидыНоменклатурыНаСервере()
	Запрос = Новый Запрос;      
	
	КореньСайт = Справочники.ВидыНоменклатуры.НайтиПоНаименованию("СайтКаталог", Истина);
	Запрос.УстановитьПараметр("Ссылка", КореньСайт);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВидыНоменклатуры.Ссылка КАК Ссылка,
	               |	ВидыНоменклатуры.Наименование КАК Наименование,
	               |	ВидыНоменклатуры.Родитель КАК Родитель,
	               |	УНИКАЛЬНЫЙИДЕНТИФИКАТОР(ВидыНоменклатуры.Ссылка) КАК УИДСсылки,
	               |	ВЫБОР
	               |		КОГДА ВидыНоменклатуры.Родитель = &Ссылка
	               |			ТОГДА УНИКАЛЬНЫЙИДЕНТИФИКАТОР(ЗНАЧЕНИЕ(Справочник.ВидыНоменклатуры.ПустаяСсылка))
	               |		ИНАЧЕ УНИКАЛЬНЫЙИДЕНТИФИКАТОР(ВидыНоменклатуры.Родитель)
	               |	КОНЕЦ КАК УИДРодителя
	               |ИЗ
	               |	Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	               |ГДЕ
	               |	ВидыНоменклатуры.ПометкаУдаления = ЛОЖЬ
	               |	И ВидыНоменклатуры.Ссылка В ИЕРАРХИИ(&Ссылка)";
	СтруктураКаталога.Очистить(); 
	ДанныеБД = Запрос.Выполнить().Выгрузить();
	
	Для каждого стр из ДанныеБД Цикл
		
		нс = СтруктураКаталога.Добавить();
		нс.ВидНоменклатуры = стр.Ссылка;
		нс.НаименованиеСайт = стр.Наименование;
		нс.Родитель = стр.Родитель;
		нс.УидСсылки = Строка(стр.УИДСсылки);
		нс.УИДРодителя = Строка(стр.УИДРодителя);
		
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВидыНоменклатуры(Команда)
	ЗаполнитьВидыНоменклатурыНаСервере();
КонецПроцедуры

&НаСервере
Процедура ВыгрузитьНаСайтНаСервере()
	
	
	
	ВызватьИсключение "Не реализовано";
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьНаСайт(Команда)    
	
	хттпЗапрос = НОвый HTTPЗапрос("api/category/new");
	Соединение  = Новый HTTPСоединение(Сервер,Число(Порт));
	хттпЗапрос.Заголовки.Вставить("Content-Type","application/json");   
	хттпЗапрос.Заголовки.Вставить(КлючКукиЗаголовок(), Куки);
	
	Для каждого стр из СтруктураКаталога Цикл
		Если НЕ стр.Выгружать Тогда
			Продолжить;
		КонецЕсли;
		
		хттпЗапрос.УстановитьТелоИзСтроки(КатегорияКаталога(стр));
		рез = Соединение.ВызватьHTTPМетод("POST",хттпЗапрос);           
		
		стр.КодОтвета = рез.КодСостояния;
		стр.ТекстОтвета = рез.ПолучитьТелоКакСтроку();		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ПолучитьССайтаНаСервере()
	ВызватьИсключение "Не реализовано";
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьССайта(Команда)
	ПолучитьССайтаНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьКонтакт(Команда)
	хттпЗапрос = НОвый HTTPЗапрос("api/admin/newcontacts");
	Соединение  = Новый HTTPСоединение(Сервер,Число(Порт));
	хттпЗапрос.Заголовки.Вставить("Content-Type","application/json");   
	хттпЗапрос.Заголовки.Вставить(КлючКукиЗаголовок(), Куки);
	хттпЗапрос.УстановитьТелоИзСтроки(ЗаписатьКонтактНаСервере());
		рез = Соединение.ВызватьHTTPМетод("POST",хттпЗапрос);           
		
		Сообщить(рез.КодСостояния);
		Сообщить(рез.ПолучитьТелоКакСтроку());	
		
КонецПроцедуры

&НаСервере
Функция ЗаписатьКонтактНаСервере()
	        
	ДанныеДляОтправки = СтруктураИзШаблона("ШаблонКонтактнаяИнформация");
	Контакты = ДанныеДляОтправки.card.states[0].div.items;
	Контакты.Добавить(ЗаголовокБлок());
	Контакты.Добавить(ОписаниеБлок());
	
	ОбщийКонтейнерКИ = СтруктураИзШаблона("ШаблонКонтейнерКИ");
	                                	
	Для каждого стрКИ из КонтактыДляСайта Цикл            
		тб = ТекстБлок();
		тб.text = СтрШаблон("%1:%2", стрКИ.Название, стрКИ.Значение);
		ОбщийКонтейнерКИ.items.Добавить(тб);
	КонецЦикла;                           
	
	Контакты.Добавить(ОбщийКонтейнерКИ); 
	ПакетДанных = Новый Структура("datatext",ДанныеДляОтправки);
	возврат ЗаписатьЗначениеJSON(ДанныеДляОтправки);
	
КонецФункции

Функция ЗаголовокБлок()
	
	Блок = Новый Структура;
	Блок.Вставить("type", "title");
	Блок.Вставить("text",ки_Титул);
	
	Возврат Блок;
	
КонецФункции

Функция ОписаниеБлок()
	
	Блок = Новый Структура;
	Блок.Вставить("type", "subtitle");
	Блок.Вставить("text",ки_ПодробноеОписание);
	
	Возврат Блок;
	
КонецФункции


Функция ТекстБлок()
	
	Блок = Новый Структура;
	Блок.Вставить("type", "text_block");
	Блок.Вставить("text","");
	
	Возврат Блок;
	
КонецФункции

Функция РазделительБлок()
	
	Разделитель = Новый Структура;
	Разделитель.Вставить("type","empty_block"); 
	
	Высота = Новый Структура;
	Высота.Вставить("type","match_parent");
	Высота.Вставить("weight", 4);
	
	Разделитель.Вставить("width", Высота); 
	
	Возврат Разделитель;                  
	
КонецФункции

&НаСервере
Процедура ОрганизацияСайтаПриИзмененииНаСервере()
	ОтборКИ = УправлениеКонтактнойИнформацией.ОтборКонтактнойИнформации();
	ОтборКИ.Дата = ТекущаяДата();
	
	КИ = УправлениеКонтактнойИнформацией.КонтактнаяИнформация(ОрганизацияСайта, ОтборКИ);  
	ЗаполнитьТаблицуДляВыгрузки(КИ);	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияСайтаПриИзменении(Элемент)
	ОрганизацияСайтаПриИзмененииНаСервере();
КонецПроцедуры    

Процедура ЗаполнитьТаблицуДляВыгрузки(ТабКИ)
	
	КонтактыДляСайта.Очистить();
	
	ки_Титул = ОрганизацияСайта.НаименованиеПолное;  	
	ки_ПодробноеОписание = ОрганизацияСайта.НаименованиеСокращенное;
	
	для каждого стр из ТабКИ Цикл
		нс = КонтактыДляСайта.Добавить();
		нс.Название = стр.Вид;
		нс.Значение = стр.Представление;
	КонецЦикла;
	
КонецПроцедуры    

Функция СтруктураИзШаблона(ИмяМакета)
	макет = РеквизитФормыВЗначение("Объект").ПолучитьМакет(ИмяМакета);
	
	ОбщийШаблонПредставления = макет.ПолучитьТекст();
	
	Возврат ПрочитатьЗначениеJSON(ОбщийШаблонПредставления);

	
КонецФункции

&НаКлиенте
Процедура ОтправитьПроизвольнуюКИ(Команда)
	хттпЗапрос = НОвый HTTPЗапрос("api/admin/newcontacts");
	Соединение  = Новый HTTPСоединение(Сервер,Число(Порт));
	хттпЗапрос.Заголовки.Вставить("Content-Type","application/json");   
	хттпЗапрос.Заголовки.Вставить(КлючКукиЗаголовок(), Куки);
	хттпЗапрос.УстановитьТелоИзСтроки(ПроизвольнаяКИ);
	рез = Соединение.ВызватьHTTPМетод("POST",хттпЗапрос);           
		
	Сообщить(рез.КодСостояния);
	Сообщить(рез.ПолучитьТелоКакСтроку());	

КонецПроцедуры
